# -*- coding: utf-8 -*-
"""Gestor Agr√≠cola Inteligente (Script Corrigido)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z3FgjLuQocvHSQckUUdH-MZaCF37b9Dm
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import sqlite3
import plotly.express as px
from PIL import Image
import io
import folium
from streamlit_folium import st_folium
import json

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gestor Agr√≠cola Inteligente",
    page_icon="üåæ",
    layout="wide"
)

# --- Fun√ß√µes da Base de Dados (SQLite) ---

DB_FILE = "fazenda_completa.db"

def get_db_connection():
    """Cria e retorna uma conex√£o com a base de dados SQLite."""
    # check_same_thread=False √© necess√°rio para o Streamlit
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """Inicializa a base de dados e cria a tabela de talh√µes se n√£o existir."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS talhoes (
            id TEXT NOT NULL,
            data TEXT NOT NULL,
            season TEXT NOT NULL,
            cultura TEXT,
            solo TEXT,
            cobertura TEXT,
            irrigado BOOLEAN,
            volume_irrigacao REAL,
            volume_ml_diario REAL,
            aplicacoes_quimicas TEXT,
            latitude REAL,
            longitude REAL,
            custo_producao REAL,
            produtividade REAL,
            foto BLOB,
            PRIMARY KEY (id, data, season)
        )
    """)
    conn.commit()
    conn.close()

@st.cache_data(ttl=30) # Cache dos dados por 30 segundos
def load_all_data_from_db():
    """Carrega todos os registos da base de dados para um DataFrame."""
    conn = get_db_connection()
    query = "SELECT * FROM talhoes ORDER BY data DESC"
    df = pd.read_sql_query(query, conn)
    conn.close()
    if not df.empty:
        df['data'] = pd.to_datetime(df['data']).dt.date
    return df

def load_photo_from_db(talhao_id, data, season):
    """Carrega a foto de um registo espec√≠fico."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT foto FROM talhoes WHERE id = ? AND data = ? AND season = ?", (talhao_id, data, season))
    result = cursor.fetchone()
    conn.close()
    return result['foto'] if result and result['foto'] else None

def save_data_to_db(data_dict):
    """Salva (insere ou atualiza) os dados de um talh√£o na base de dados."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO talhoes (id, data, season, cultura, solo, cobertura, irrigado, volume_irrigacao, volume_ml_diario, aplicacoes_quimicas, latitude, longitude, custo_producao, produtividade, foto)
        VALUES (:id, :data, :season, :cultura, :solo, :cobertura, :irrigado, :volume_irrigacao, :volume_ml_diario, :aplicacoes_quimicas, :latitude, :longitude, :custo_producao, :produtividade, :foto)
        ON CONFLICT(id, data, season) DO UPDATE SET
            cultura=excluded.cultura,
            solo=excluded.solo,
            cobertura=excluded.cobertura,
            irrigado=excluded.irrigado,
            volume_irrigacao=excluded.volume_irrigacao,
            volume_ml_diario=excluded.volume_ml_diario,
            aplicacoes_quimicas=excluded.aplicacoes_quimicas,
            latitude=excluded.latitude,
            longitude=excluded.longitude,
            custo_producao=excluded.custo_producao,
            produtividade=excluded.produtividade,
            foto=excluded.foto
    """, data_dict)
    conn.commit()
    conn.close()
    st.cache_data.clear()

# --- Inicializa√ß√£o da App ---
init_db()
all_data_df = load_all_data_from_db()

# --- BARRA LATERAL (SIDEBAR) ---
with st.sidebar:
    st.image("http://googleusercontent.com/file_content/1", width=100)
    st.title("Painel de Controlo")
    st.markdown("---")

    lista_talhoes = [f"Talh√£o {i}" for i in range(1, 101)]

    # L√≥gica para gerir a sele√ß√£o do talh√£o no estado da sess√£o
    if 'talhao_selecionado' not in st.session_state:
        st.session_state['talhao_selecionado'] = lista_talhoes[0]

    talhao_selecionado_nome = st.selectbox(
        "Selecione o Talh√£o:",
        options=lista_talhoes,
        key='talhao_selecionado'
    )

    latest_data_df = all_data_df[all_data_df['id'] == talhao_selecionado_nome]
    dados_atuais = None
    if not latest_data_df.empty:
        dados_atuais = latest_data_df.iloc[0].to_dict()
    else:
        dados_atuais = {
            "id": talhao_selecionado_nome, "data": datetime.now().date(), "season": "A",
            "cultura": "Nenhum", "solo": "Argila", "cobertura": "braqui√°ria", "irrigado": False,
            "volume_irrigacao": 0.0, "volume_ml_diario": 0.0, "aplicacoes_quimicas": "[]", "latitude": 0.0, "longitude": 0.0,
            "custo_producao": 0.0, "produtividade": 0.0
        }

# --- P√ÅGINA PRINCIPAL ---
st.title("üåæ Gestor Agr√≠cola Inteligente")
st.markdown("---")

tab_titles = ["üìù Editar Talh√£o", "üìÑ Visualiza√ß√£o Geral", "üìä An√°lise Comparativa", "üîé Visualizar Talh√£o", "üó∫Ô∏è Mapa Geogr√°fico"]
tab1, tab2, tab3, tab4, tab5 = st.tabs(tab_titles)

with tab1:
    st.header(f"Editando Informa√ß√µes do **{talhao_selecionado_nome}**")

    # Inicializa a lista de aplica√ß√µes no estado da sess√£o
    if 'current_applications' not in st.session_state:
        try:
            st.session_state.current_applications = json.loads(dados_atuais.get("aplicacoes_quimicas", "[]"))
        except (json.JSONDecodeError, TypeError):
            st.session_state.current_applications = []

    with st.form(key="edit_form"):
        st.subheader("Informa√ß√µes Gerais e Agron√≥micas")
        col1, col2 = st.columns(2)

        opcoes_cobertura = ["braqui√°ria", "milheto", "crotal√°ria", "aveia", "centeio", "nabo forrageiro", "gira√ßol", "mucuna", "tremo√ßo"]
        opcoes_solo = ["Areia", "Silte", "Argila"]

        with col1:
            data = st.date_input("Data do Registo:", value=dados_atuais["data"])
            season = st.selectbox("Season (Safra):", options=["A", "B"], index=["A", "B"].index(dados_atuais["season"]))
            cultura = st.selectbox("Tipo de Cultura:", options=["Soja", "Milho", "Algod√£o", "Nenhum"], index=["Soja", "Milho", "Algod√£o", "Nenhum"].index(dados_atuais["cultura"]))
            try:
                solo_index = opcoes_solo.index(dados_atuais.get("solo"))
            except (ValueError, TypeError):
                solo_index = 0
            solo = st.selectbox("Tipo de Solo:", options=opcoes_solo, index=solo_index)

        with col2:
            try:
                cobertura_index = opcoes_cobertura.index(dados_atuais.get("cobertura"))
            except (ValueError, TypeError):
                cobertura_index = 0
            cobertura = st.selectbox("Cobertura de Rota√ß√£o:", options=opcoes_cobertura, index=cobertura_index)
            irrigado = st.checkbox("√â Irrigado?", value=bool(dados_atuais.get("irrigado", False)))
            volume_irrigacao = 0.0
            volume_ml_diario = 0.0
            if irrigado:
                volume_irrigacao = st.number_input("Vaz√£o Hor√°ria (m¬≥/h):", value=float(dados_atuais.get("volume_irrigacao", 0.0)), min_value=0.0, format="%.2f")
                volume_ml_diario = st.number_input("Volume Di√°rio (ml):", value=float(dados_atuais.get("volume_ml_diario", 0.0)), min_value=0.0, format="%.2f")

        st.subheader("Gest√£o Financeira e de Produ√ß√£o")
        col3, col4 = st.columns(2)
        with col3:
            custo_producao = st.number_input("Custo de Produ√ß√£o (R$/ha):", value=float(dados_atuais.get("custo_producao", 0.0)), min_value=0.0, format="%.2f")
        with col4:
            produtividade = st.number_input("Produtividade (sacos/ha):", value=float(dados_atuais.get("produtividade", 0.0)), min_value=0.0, format="%.2f")

        st.subheader("Localiza√ß√£o e Registos")
        col5, col6 = st.columns(2)
        with col5:
            st.markdown("**Coordenadas Geogr√°ficas**")
            latitude = st.number_input("Latitude:", value=float(dados_atuais.get("latitude", 0.0)), format="%.6f")
            longitude = st.number_input("Longitude:", value=float(dados_atuais.get("longitude", 0.0)), format="%.6f")
        with col6:
            st.markdown("**Registo Fotogr√°fico**")
            uploaded_photo = st.file_uploader("Carregar foto do talh√£o", type=["jpg", "jpeg", "png"])

        # O bot√£o de salvar est√° aqui
        submitted = st.form_submit_button("Salvar na Base de Dados")
        if submitted:
            photo_bytes = None
            if uploaded_photo is not None:
                photo_bytes = uploaded_photo.getvalue()

            dados_para_salvar = {
                "id": talhao_selecionado_nome, "data": data.strftime('%Y-%m-%d'), "season": season, "cultura": cultura,
                "solo": solo, "cobertura": cobertura, "irrigado": irrigado,
                "volume_irrigacao": volume_irrigacao, "volume_ml_diario": volume_ml_diario,
                "aplicacoes_quimicas": json.dumps(st.session_state.current_applications), # Salva a lista como JSON
                "latitude": latitude, "longitude": longitude,
                "custo_producao": custo_producao, "produtividade": produtividade,
                "foto": photo_bytes
            }
            save_data_to_db(dados_para_salvar)
            st.success(f"Dados do **{talhao_selecionado_nome}** para a data **{data.strftime('%d/%m/%Y')}** salvos com sucesso!")

            current_index = lista_talhoes.index(talhao_selecionado_nome)
            next_index = (current_index + 1) % len(lista_talhoes)

            # --- LINHA CORRIGIDA ---
            st.session_state['talhao_selecionado'] = lista_talhoes[next_index]

            del st.session_state.current_applications # Limpa a lista de aplica√ß√µes para o pr√≥ximo talh√£o
            st.rerun()

    # --- Gest√£o das Aplica√ß√µes Qu√≠micas (Fora do Formul√°rio) ---
    st.subheader("Aplica√ß√µes Qu√≠micas")
    opcoes_quimicos = ["Inseticidas", "Fungicidas", "Herbicidas", "Acaricidas", "Nematicidas", "Desfolhantes", "Fumigantes"]

    # Exibe a lista de aplica√ß√µes atuais
    if st.session_state.current_applications:
        for i, app in enumerate(st.session_state.current_applications):
            col_app1, col_app2, col_app3 = st.columns([3, 2, 1])
            col_app1.write(f"**Tipo:** {app['tipo']}")
            col_app2.write(f"**Volume:** {app['volume']} {app.get('unidade', 'L/ha')}")
            if col_app3.button("Remover", key=f"remove_app_{i}"):
                st.session_state.current_applications.pop(i)
                st.rerun()
    else:
        st.info("Nenhuma aplica√ß√£o qu√≠mica adicionada para este registo.")

    # Inputs para adicionar nova aplica√ß√£o
    with st.container(border=True):
        st.markdown("**Adicionar Nova Aplica√ß√£o**")
        col_add1, col_add2, col_add3 = st.columns([3, 2, 1])
        novo_tipo = col_add1.selectbox("Tipo de Produto", options=opcoes_quimicos, key="new_app_tipo")
        novo_volume = col_add2.number_input("Volume (unidade/ha)", min_value=0.0, format="%.2f", key="new_app_vol")
        if col_add3.button("Adicionar Aplica√ß√£o", use_container_width=True):
            st.session_state.current_applications.append({"tipo": novo_tipo, "volume": novo_volume, "unidade": "un/ha"})
            st.rerun()


with tab2:
    st.header("Hist√≥rico Completo da Fazenda")
    if not all_data_df.empty:
        st.dataframe(all_data_df)
    else:
        st.info("A base de dados est√° vazia.")

with tab3:
    st.header("üìä An√°lise Comparativa")
    if all_data_df.empty or all_data_df['produtividade'].sum() == 0:
        st.warning("N√£o h√° dados de produ√ß√£o suficientes para gerar an√°lises.")
    else:
        df_analise = all_data_df.drop_duplicates(subset=['id', 'season'], keep='first')

        st.subheader("Produtividade M√©dia por Cultura e Safra")
        fig_prod = px.bar(df_analise, x='cultura', y='produtividade', color='season',
                          barmode='group', title="Produtividade M√©dia (sacos/ha)",
                          labels={'produtividade': 'Produtividade M√©dia', 'cultura': 'Cultura'})
        st.plotly_chart(fig_prod, use_container_width=True)

        st.subheader("Custo de Produ√ß√£o M√©dio por Cultura e Safra")
        fig_custo = px.bar(df_analise, x='cultura', y='custo_producao', color='season',
                           barmode='group', title="Custo de Produ√ß√£o M√©dio (R$/ha)",
                           labels={'custo_producao': 'Custo M√©dio', 'cultura': 'Cultura'})
        st.plotly_chart(fig_custo, use_container_width=True)

with tab4:
    st.header(f"Visualiza√ß√£o Detalhada: **{talhao_selecionado_nome}**")
    if dados_atuais and not latest_data_df.empty:
        st.markdown(f"Exibindo o registo mais recente de **{dados_atuais['data'].strftime('%d/%m/%Y')}**.")
        st.markdown("---")

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìã Informa√ß√µes Gerais")
            st.markdown(f"**üåø Safra:** {dados_atuais['season']} | **üå± Cultura:** {dados_atuais['cultura']}")
            st.metric(label="Produtividade", value=f"{dados_atuais.get('produtividade', 0):.2f} sc/ha")
            st.metric(label="Custo de Produ√ß√£o", value=f"R$ {dados_atuais.get('custo_producao', 0):.2f}/ha")

            with st.expander("Ver detalhes de irriga√ß√£o e agronomia"):
                status_irrigacao = "Sim" if dados_atuais.get('irrigado') else "N√£o"
                st.markdown(f"**üíß Irrigado:** {status_irrigacao}")
                st.markdown(f"**‚è±Ô∏è Vaz√£o Hor√°ria:** {dados_atuais.get('volume_irrigacao', 0):.2f} m¬≥/h")
                st.markdown(f"**üíß Volume Di√°rio:** {dados_atuais.get('volume_ml_diario', 0):.2f} ml")
                st.markdown(f"**üü´ Solo:** {dados_atuais.get('solo')}")
                st.markdown(f"**üîÑ Cobertura:** {dados_atuais.get('cobertura')}")

        with col2:
            st.subheader("üì∏ Registo Fotogr√°fico")
            foto_db = load_photo_from_db(dados_atuais['id'], dados_atuais['data'].strftime('%Y-%m-%d'), dados_atuais['season'])
            if foto_db:
                st.image(Image.open(io.BytesIO(foto_db)), caption="Foto mais recente do talh√£o", use_column_width=True)
            else:
                st.info("Nenhuma foto registada para esta data.")

        st.subheader("üß™ Aplica√ß√µes Qu√≠micas Registadas")
        try:
            apps = json.loads(dados_atuais.get("aplicacoes_quimicas", "[]"))
            if apps:
                st.dataframe(apps)
            else:
                st.info("Nenhuma aplica√ß√£o qu√≠mica para este registo.")
        except (json.JSONDecodeError, TypeError):
            st.warning("N√£o foi poss√≠vel ler os dados de aplica√ß√µes qu√≠micas (formato antigo).")


with tab5:
    st.header("üó∫Ô∏è Mapa Geogr√°fico Interativo")
    if all_data_df.empty:
        st.warning("N√£o h√° dados para exibir no mapa.")
    else:
        df_mapa = all_data_df.drop_duplicates(subset='id', keep='first')
        df_mapa = df_mapa[(df_mapa['latitude'].notna()) & (df_mapa['longitude'].notna()) & (df_mapa['latitude'] != 0.0) & (df_mapa['longitude'] != 0.0)]

        if df_mapa.empty:
            st.info("Nenhum talh√£o possui coordenadas geogr√°ficas v√°lidas registadas.")
        else:
            map_color = {'Soja': 'green', 'Milho': 'orange', 'Algod√£o': 'white', 'Nenhum': 'gray'}
            map_center = [df_mapa['latitude'].mean(), df_mapa['longitude'].mean()]
            m = folium.Map(location=map_center, zoom_start=13)

            folium.TileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', attr='Google', name='Google Sat√©lite').add_to(m)
            folium.TileLayer('OpenStreetMap', name='OpenStreetMap').add_to(m)

            for idx, row in df_mapa.iterrows():
                popup_html = f"""
                <b>Talh√£o:</b> {row['id']}<br>
                <b>Cultura:</b> {row['cultura']}<br>
                <b>Produtividade:</b> {row['produtividade']:.2f} sc/ha
                """
                folium.Marker(
                    location=[row['latitude'], row['longitude']],
                    popup=folium.Popup(popup_html, max_width=200),
                    tooltip=row['id'],
                    icon=folium.Icon(color=map_color.get(row['cultura'], 'blue'))
                ).add_to(m)

            folium.LayerControl().add_to(m)

            st_folium(m, width=725, height=500)